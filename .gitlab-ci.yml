---
variables:
  DOCKER_IMAGE: "${DOCKER_REGISTRY}/env/dind:v1.15"
  KUBECTL_IMAGE: "${DOCKER_REGISTRY}/platform/kubectl:bd1bf67b"
  NAMESPACE: "${CI_PROJECT_NAMESPACE}"
  K8S_NAMESPACE: "test-ns"
  PROJECT_NAME: "${CI_PROJECT_NAME}"
  PROJECT_IMAGE: "${DOCKER_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}"
  PROJECT_TAG: "${PROJECT_TAG}"
  INGRESS_TEST_HOST: "qa.test.xxx.com"  # 定义 Ingress 域名
  ENVIRONMENT: "test"  # 定义环境变量

stages:
- ".pre"
- build
- deploy
- ".post"

build:
  image: "${DOCKER_IMAGE}"
  stage: build
  script:
  - export PROJECT_TAG=${CI_COMMIT_TAG:-${CI_BUILD_REF_NAME}-${CI_COMMIT_SHA:0:8}}
  - docker build -t ${PROJECT_IMAGE}:${PROJECT_TAG}  .
  - docker push ${PROJECT_IMAGE}:${PROJECT_TAG}

deploy-test:
  image: "${KUBECTL_IMAGE}"
  stage: deploy
  script:
    # 生成 kubeconfig 文件
    - export PROJECT_TAG=${CI_COMMIT_TAG:-${CI_BUILD_REF_NAME}-${CI_COMMIT_SHA:0:8}}
    - mkdir -p ~/.kube
    - echo "$KUBE_TEST_CONFIG" > ~/.kube/config  # 直接写入配置文件
    # 验证连接
    - kubectl get node
    # 继续部署操作...
    - envsubst < k8s/test/deployment.tpl.yaml > k8s/test/deployment.yaml
    - envsubst < k8s/test/service.tpl.yaml > k8s/test/service.yaml
    - envsubst < k8s/test/ingress.tpl.yaml > k8s/test/ingress.yaml
      # 打印渲染后的 YAML 文件内容（关键部分）
    - echo "===== deployment.yaml 内容 ====="
    - cat k8s/test/deployment.yaml
    - cat  k8s/test/service.yaml
    - cat k8s/test/ingress.yaml
    - echo "===== 结束打印 ====="
    # 部署到 Kubernetes
    - kubectl delete -f k8s/test/deployment.yaml
    - sleep 10
    - kubectl apply -f k8s/test/deployment.yaml
    - kubectl apply -f k8s/test/service.yaml
    - kubectl apply -f k8s/test/ingress.yaml
    # 检查部署状态
    - kubectl rollout status deployment/${PROJECT_NAME}-performance --namespace=${K8S_NAMESPACE}
  only:
    - master  # 仅 main 分支触发部署
    - tags  # 或者 tags 触发部署
